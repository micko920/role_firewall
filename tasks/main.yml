---
- include_tasks: is_systemd.yml

- name: Ensure iptables is present.
  package: name=iptables state=present

- name: Flush iptables the first time playbook runs.
  command: >
    iptables -F
    creates=/etc/firewall.bash
  when:
    - systemd_pid_1 is defined and systemd_pid_1
    - ansible_virtualization_type != 'docker'

- name: Copy firewall script into place.
  template:
    src: firewall.bash.j2
    dest: /etc/firewall.bash
    owner: root
    group: root
    mode: 0744
  notify: restart firewall

- name: create liferay service instance
  import_role:
    name: micko920.role_createservice
  vars:
    service_list:
      - name: "firewall"
        description: "Firewall"
        start_command: "/etc/firewall.bash"
        stop_command: "/sbin/iptables -F"
        type: "oneshot"
        after: "syslog.target network.target"
        remain_after_exit: "yes"
  when: systemd_pid_1 is defined and systemd_pid_1

- name: Verify if br_netfilter module exists
  shell: "modinfo br_netfilter"
  environment:
    PATH: "{{ ansible_env.PATH }}:/sbin"  # Make sure we can workaround RH's conservative path management
  register: modinfo_br_netfilter
  failed_when: modinfo_br_netfilter.rc not in [0, 1]
  changed_when: false
  when:
    - systemd_pid_1 is defined and systemd_pid_1
    - ansible_virtualization_type != 'docker'

- name: Verify br_netfilter module path exists
  file:
    path: /etc/modules-load.d
    state: directory

- name: Enable br_netfilter module
  modprobe:
    name: br_netfilter
    state: present
  when:
    - systemd_pid_1 is defined and systemd_pid_1
    - ansible_virtualization_type != 'docker'
    - modinfo_br_netfilter.rc == 0

- name: Persist br_netfilter module
  copy:
    dest: /etc/modules-load.d/br_netfilter.conf
    content: br_netfilter
  when:
    - systemd_pid_1 is defined and systemd_pid_1
    - ansible_virtualization_type != 'docker'
    - modinfo_br_netfilter.rc == 0

- name: update kernel bridge settings
  sysctl:
    name: net.bridge.bridge-nf-call-iptables
    value: "1"
    sysctl_set: yes
    state: present
    reload: yes
  when:
    - systemd_pid_1 is defined and systemd_pid_1
    - ansible_virtualization_type != 'docker'

- name: sysctl ip forwarding is on
  sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    sysctl_set: yes
  when:
    - systemd_pid_1 is defined and systemd_pid_1
    - ansible_virtualization_type != 'docker'

- name: Configure the firewall service.
  systemd:
    name: firewall
    state: "{{ firewall_state }}"
    enabled: "{{ firewall_enabled_at_boot }}"
  when: systemd_pid_1 is defined and systemd_pid_1

- import_tasks: disable-other-firewalls.yml
  when: firewall_disable_firewalld or firewall_disable_ufw
